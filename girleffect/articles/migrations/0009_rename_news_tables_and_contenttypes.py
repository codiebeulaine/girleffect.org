# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-26 14:27
from __future__ import unicode_literals

from django.db import ProgrammingError, migrations, transaction


def rename_contenttypes_and_tables(apps, schema_editor):
    # Rename old tables, if they exist
    for old_table_name in [
        "news_articlecategory",
        "news_newsindex",
        "news_newspage",
        "news_newspagecategory",
        "news_newspagerelateddocument",
        "news_newspagerelatedpage",
    ]:
        model_name = old_table_name.split("_")[1]
        new_table_name = "articles_" + model_name
        try:
            with transaction.atomic():
                schema_editor.alter_db_table(model_name, old_table_name, new_table_name)
        except ProgrammingError:
            pass  # Old table doesn't exist (tests etc.)

    # Use existing ContentTypes, if they exist
    schema_editor.execute("UPDATE django_content_type SET app_label='articles' WHERE app_label='news'")


class Migration(migrations.Migration):
    """ The `articles` app used to be called `news`. All the migrations were marked as replacements,
        but the contenttypes framework can still create new rows for the "new" models, which breaks
        all of the GenericKey relationships. This migration swaps the old rows for the new ones, if
        they exist (for tests etc. they won't).
    """
    dependencies = [
        ('articles', '0008_auto_20171024_1559'),
    ]

    operations = [
        migrations.RunPython(rename_contenttypes_and_tables),
    ]
